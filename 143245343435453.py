# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '143245343435453.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import sys
import requests
import re
import json
from functools import reduce
from hashlib import md5
import urllib.parse
import time
import ve1
def show_windows():
    app = QtWidgets.QApplication(sys.argv)
    m = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(m)
    m.show()
    sys.exit(app.exec_())

h={'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36 Edg/120.0.0.0'}
class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(508, 130)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(20, 30, 151, 51))
        self.label.setObjectName("label")
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(160, 40, 211, 31))
        self.lineEdit.setObjectName("lineEdit")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(380, 40, 101, 31))
        self.pushButton.setObjectName("pushButton")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 508, 23))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        self.pushButton.clicked.connect(self.bi) # type: ignore
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    mixinKeyEncTab = [
        46, 47, 18, 2, 53, 8, 23, 32, 15, 50, 10, 31, 58, 3, 45, 35, 27, 43, 5, 49,
        33, 9, 42, 19, 29, 28, 14, 39, 12, 38, 41, 13, 37, 48, 7, 16, 24, 55, 40,
        61, 26, 17, 0, 1, 60, 51, 30, 4, 22, 25, 54, 21, 56, 59, 6, 63, 57, 62, 11,
        36, 20, 34, 44, 52
    ]

    def getMixinKey(self,orig: str):
        '对 imgKey 和 subKey 进行字符顺序打乱编码'
        return reduce(lambda s, i: s + orig[i],self.mixinKeyEncTab, '')[:32]

    def encWbi(self,params: dict, img_key: str, sub_key: str):
        '为请求参数进行 wbi 签名'
        mixin_key = self.getMixinKey(img_key + sub_key)
        curr_time = round(time.time())
        params['wts'] = curr_time  # 添加 wts 字段
        params = dict(sorted(params.items()))  # 按照 key 重排参数
        # 过滤 value 中的 "!'()*" 字符
        params = {
            k: ''.join(filter(lambda chr: chr not in "!'()*", str(v)))
            for k, v
            in params.items()
        }
        query = urllib.parse.urlencode(params)  # 序列化参数
        wbi_sign = md5((query + mixin_key).encode()).hexdigest()  # 计算 w_rid
        params['w_rid'] = wbi_sign
        return params

    def getWbiKeys(self):
        '获取最新的 img_key 和 sub_key'
        cookies={}
        resp = requests.get('https://api.bilibili.com/x/web-interface/nav',headers=h,cookies={'DedeUserID':'568261963','DedeUserID__ckMd5':'6651890351609c6d','SESSDATA':'3ca1bfc7%2C1719583383%2Cf356b%2Ac2CjCz2m','buvid3':'A03290C8-2051-FCC0-FB86-DC312773F25B0752','bili_jct':'6974c955e9de5ac97cb216ff15f75dd0'})
        resp.raise_for_status()
        json_content = resp.json()
        img_url: str = json_content['data']['wbi_img']['img_url']
        sub_url: str = json_content['data']['wbi_img']['sub_url']
        img_key = img_url.rsplit('/', 1)[1].split('.')[0]
        sub_key = sub_url.rsplit('/', 1)[1].split('.')[0]
        return img_key, sub_key
    def bi(self):
        k=self.lineEdit.text()
        p={'bvid':k}
        ge=requests.get('https://api.bilibili.com/x/web-interface/view',params=p,headers=h)
        print(ge.text)
        f=ge.text
        f = re.search(r'({.*})', f).group(0)
        j = json.loads(f)
        cid=j['data']['cid']
        pcid={'bvid':k,'cid':cid,'platform':'html5'}
        img_key, sub_key = self.getWbiKeys()

        signed_params = self.encWbi(
            params={
                'bvid': k,
                'cid': cid,
                'platform': 'html5'
            },
            img_key=img_key,
            sub_key=sub_key
        )
        query = urllib.parse.urlencode(signed_params)
        print(signed_params)
        mmm=requests.get('https://api.bilibili.com/x/player/wbi/playurl',params=signed_params,headers=h)
        print(mmm.json())
        op=mmm.json()
        print(op['data']['durl'][0]['url'])
        n=requests.get(op['data']['durl'][0]['url'],headers=h)
        l=n.content
        if n.status_code==200:
            f=open('y.mp4','wb+')
            f.write(l)
            f.close()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "TextLabel"))
        self.pushButton.setText(_translate("MainWindow", "PushButton"))
if __name__ == "__main__":
    show_windows()